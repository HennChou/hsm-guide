<?xml version="1.0"?>
    <chapter xml:id="dynamic_key_exchange"
      version="5.0" 
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">

 <title>Dynamic Key Exchange</title>

    <abstract><title>Abstract</title>
    	<para>TODO: abstract</para>
    </abstract>
    
    <section><title>Overview</title>
    
    	<para>TODO: Why dynamic key exchange?</para>
    
    </section>
    
    <section>
    	<title>Zone PIN Key (ZPK)</title>
    	
    	<para>
    		The Zone PIN Key (ZPK) is a data encrypting key. It is used to encrypt the data that is transmitted in a security zone. 
    		For transfer between sites, the ZPK is encrypted under the ZMK. When stored locally (e.g. on the application server), the 
    		ZPK is encrypted using one of the LMK Keys.
    	</para>
    	
    	<para>
    		ZPKs have a key type code of 001 (encrypted under LMK pair 06-07 with a variant of 0).
    	</para>
    	
    	<para>
    		TODO: See “Laboratory 05 – Creating a ZPK” for hands on experience creating a ZPK.
    	</para>
    	
		<db:example><title>Dynamic Key Exchange</title>
		
			<para>
				Assume that the ZMK presented in the previous example has been exchanged between two parties. One party, then, generates 
				a random ZPK equal to:
				
				<programlisting>ADD3B5C7B576D3AE 38B90B7C0EB67A7C, KCV = CB59C0</programlisting>
			</para>
			
			<para>
				The party then encrypts this ZPK under the ZMK to safely transmit this to the other party. The ZPK under the ZMK is:
				
				<programlisting>C9A62E96ADFB52A7 815BE8D7E730B24E, KCV = CB59C0</programlisting>
			</para>
		</db:example>    	
    </section>

	<section>
		<title>Key Translation</title>
		
		<para>
			In our previous example, the value C9A62E96ADFB52A7 815BE8D7E730B24E represents the randomly created ZPK encrypted under 
			the previously created ZMK. But imagine that one of the parties that have exchanged this ZPK needs to transmit it to another 
			party with which they share a different ZMK which we’ll call ZMK2 . To properly transmit the ZPK to the other zone that is 
			secured with ZMK2, the ZPK has to be:
			
				<db:itemizedlist>
					<db:listitem>
						<db:para>Decrypted under ZMK.</db:para>
					</db:listitem>
					<db:listitem>
						<db:para>Encrypted under ZMK2.</db:para>
					</db:listitem>					
				</db:itemizedlist>			
		</para>
		
		<para>
			This process is called key translation. Key translation does not happen with specific key types as the ZMK that was used 
			in the previous example but is a more general process - for example it is possible to translate a key from encryption under 
			the ZMK to encryption under an LMK.
		</para>
		
		<para>
			Key translation always takes place within the HSM to avoid exposing the clear value of the key being translated.
		</para>
	</section>
	
	<section>
		<title>Translating a ZPK</title>
		<subtitle>(between ZMK encryption and LMK encryption)</subtitle>
		
		<para>
			The HSM provides functionality to translate a ZPK between ZMK and LMK. This is used when a ZPK is received by Site B. In 
			this case, Site A sends the ZPK encrypted with the ZMK to Site B.  Site B translates the ZPK to LMK encryption. 		
		</para>
		
		<para>
			The ZPK under LMK encryption is used for encrypting/decrypting the data sent between the sites.
		</para>
		
		<para>
			TODO: insert diagram
		</para>
	</section>
	
  <section>
  	<title>Exercises</title>
  	
  	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="exercise_thalessim_creating_a_zpk.xml" />
  </section>	
	
</chapter>