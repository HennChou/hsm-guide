<?xml version="1.0"?>
<section xml:id="exercise_thalessim_javaclient"
      version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">

	<title>Thales Simulator Java client application</title>
    
	<para>
		In this session, we connect to the HSM over TCP/IP using Java.  When we connect using Java,
		we can send Host Commands to the HSM. 
	</para>
	
	<para>
		In the code example, below, we send the command <command>Perform Diagnostics (NC)</command>, 
		and print the response to System.out.
	</para>
	
	<para>
		For a full treatment of Host Programming the Thales HSM, refer to the Thales documentation 
		“Host Programmer’s Manual”.  For a full list of Host Commands, refer to the Thales 
		documentation “Host Command Reference Manual”
	</para>
	
<db:programlisting>
package demo;
 
import java.io.BufferedOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
 
public class Main {
 
   	/**
   	 * Runs the Command "Perform Diagnostics (NC)" and
   	 * prints the response to System.out
   	 *
   	 * An example response is:
   	 *
   	 * !0000ND007B44AC1DDEE2A94B0007-E000
   	 */
   	public static void main(String[] args) throws Exception {
 
          	Socket socket = new Socket("127.0.0.1", 9998);
 
          	// by default the Thales Simulator has a header of 4 bytes
          	// so set these to 0000
          	String command = "0000NC";
 
          	// leave two bytes for inserting the command length
          	byte [] commandBuffer = ("  " + command).getBytes(); 
 
          	// populate the command length
          	commandBuffer[0] = (byte) (command.length() / 256);
          	commandBuffer[1] = (byte) (command.length() % 256);
 
          	// Write the command to the HSM
          	OutputStream out = socket.getOutputStream();
          	BufferedOutputStream bufferedOut =
                       	new BufferedOutputStream(out, 1024);
          	bufferedOut.write(commandBuffer);
          	bufferedOut.flush();
 
          	// Read the response from the HSM
          	InputStream in = socket.getInputStream();
          	int result;
          	while ((result = in.read()) != -1) {
                 	System.out.print((char)result);
          	}
          	socket.close();
   	}
}	
</db:programlisting>
  
 </section>