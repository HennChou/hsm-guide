<?xml version="1.0"?>
    <chapter xml:id="secure_key_exchange"
      version="5.0" 
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">

 <title>Secure Key Exchange</title>

    <abstract><title>Abstract</title>
    	<para>TODO: abstract</para>
    	<para>Key export, key import and security implications.</para>
    </abstract>

	<section><title>Overview</title>
		<para>
			To securely exchange information between two users using the DES encryption scheme, it is vital to securely share a set 
			of initial keys. This role is fulfilled by the Zone Master Keys. Unlike an LMK which does not leave the HSM, ZMKs are 
			intended to be shared between sites to create <emphasis>secure Zones</emphasis>. The ZMK is distributed manually between 
			the sites. The ZMK allow future (data encrypting) keys to be automatically shared between sites by encrypting those future keys 
			with the ZMK. In that regard, they work very much like the LMKs with the important exception that they can be shared 
			between users.
		</para>
		
		<para>
			ZMKs have a key type code of 000 (they are encrypted under LMK pair 04-05 with a variant of 0).
		</para>			
		
		<para>
			TODO diagram
		</para>
		
		<para>
			The transfer of the ZMK between sites is performed manually.  The ZMK is shared in parts (components) so that no one person 
			will see the key.
		</para>
		
		<para>
			TODO diagram
		</para>
		
		<para>
			The data encryption key is a Zone PIN Key (ZPK).   The ZPK was historically used to encrypt PINs for transfer between sites 
			(e.g. between Acquirer and Issuer).
		</para>
		
		<para>
			For local storage (e.g. on the application server using the ZMK), the ZMK is encrypted under one of the LMK keys.
		</para>
		
		<db:example><title>Secure Key Exchange</title>
		
			<para>
				Two parties want to exchange a ZMK. One party generates a random ZMK using three clear components which are the following:
				
	<programlisting>2CBF0D8FA4E66ECE 6B239E25B9BAD934
	B60825E3790D31CE 4A4AA74397461C13
	29BFE3C1D0C1E50B CD7038A42CFB160B</programlisting>			
			</para>
			
			<para>TODO: describe what is meant by clear components</para>
			
			<para>
				Each of these clear components are kept by a separate custodian that works for the first party and are delivered 
				to different custodians of the second party. To create the complete ZMK, each custodian enters their component to 
				the HSM which combines them to form the ZMK. Most typically, the clear components are simply XORed to form the ZMK. 
				In the example, the ZMK value is:
				
				<programlisting>B308CBAD0D2ABA0B EC1901C20207D32C</programlisting>
			</para>
			
			<para>
				When generating the ZMK, the first party also gives the KCV of the ZMK to the second party (for the example key the 
				KCV is 6CE4CF). That way, the second party can verify the correct reception and data entry of the ZMK components.
			</para>
			
			<para>
				TODO: See “Laboratory 04 – Creating a ZMK” for hands on experience creating a ZMK.
			</para>
		
		</db:example>
	</section>
	      
  <section>
  	<title>Exercises</title>
  	
  	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="exercise_thalessim_creating_a_zmk.xml" />
  </section>	      
	         
</chapter>